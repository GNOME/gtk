<!-- ##### SECTION Title ##### -->
GtkStatusbar

<!-- ##### SECTION Short_Description ##### -->
Report messages of minor importance to the user

<!-- ##### SECTION Long_Description ##### -->
<para>
A #GtkStatusbar is usually placed along the bottom of an application's main
#GtkWindow. It may provide a regular commentary of the application's status
(as is usually the case in a web browser, for example), or may be used to
simply output a message when the status changes, (when an upload is complete
in an FTP client, for example). 
It may also have a resize grip (a triangular area in the lower right corner) 
which can be clicked on to resize the window containing the statusbar.
</para>
<para>
Status bars in GTK+ maintain a stack of messages. The message at
the top of the each bar's stack is the one that will currently be displayed.
</para>
<para>
Any messages added to a statusbar's stack must specify a <emphasis>context 
id</emphasis> that is used to uniquely identify the source of a message. 
This context id can be generated by gtk_statusbar_get_context_id(), given a 
message and the statusbar that it will be added to. Note that messages are 
stored in a stack, and when choosing which message to display, the stack 
structure is adhered to, regardless of the context identifier of a message.
</para>
<para>
One could say that a statusbar maintains one stack of messages for display
purposes, but allows multiple message producers to maintain sub-stacks of
the messages they produced (via context ids).
</para>
<para>
Status bars are created using gtk_statusbar_new().
</para>
<para>
Messages are added to the bar's stack with gtk_statusbar_push().
</para>
<para>
The message at the top of the stack can be removed using gtk_statusbar_pop(). 
A message can be removed from anywhere in the stack if its message_id was 
recorded at the time it was added. This is done using gtk_statusbar_remove().
</para>

<!-- ##### SECTION See_Also ##### -->


<!-- ##### SECTION Stability_Level ##### -->


<!-- ##### SECTION Image ##### -->


<!-- ##### STRUCT GtkStatusbar ##### -->
<para>
Contains private data that should be modified with the functions described 
below.
</para>


<!-- ##### SIGNAL GtkStatusbar::text-popped ##### -->
<para>

</para>

@statusbar: 
@context_id: 
@text: 

<!-- ##### SIGNAL GtkStatusbar::text-pushed ##### -->
<para>

</para>

@statusbar: 
@context_id: 
@text: 

<!-- ##### ARG GtkStatusbar:has-resize-grip ##### -->
<para>

</para>

<!-- ##### ARG GtkStatusbar:shadow-type ##### -->
<para>

</para>

<!-- ##### FUNCTION gtk_statusbar_new ##### -->
<para>

</para>

@void: 
@Returns: 


<!-- ##### FUNCTION gtk_statusbar_get_context_id ##### -->
<para>

</para>

@statusbar: 
@context_description: 
@Returns: 


<!-- ##### FUNCTION gtk_statusbar_push ##### -->
<para>

</para>

@statusbar: 
@context_id: 
@text: 
@Returns: 


<!-- ##### FUNCTION gtk_statusbar_pop ##### -->
<para>

</para>

@statusbar: 
@context_id: 


<!-- ##### FUNCTION gtk_statusbar_remove ##### -->
<para>

</para>

@statusbar: 
@context_id: 
@message_id: 


<!-- ##### FUNCTION gtk_statusbar_remove_all ##### -->
<para>

</para>

@statusbar: 
@context_id: 


<!-- ##### FUNCTION gtk_statusbar_set_has_resize_grip ##### -->
<para>

</para>

@statusbar: 
@setting: 


<!-- ##### FUNCTION gtk_statusbar_get_has_resize_grip ##### -->
<para>

</para>

@statusbar: 
@Returns: 


<!-- ##### FUNCTION gtk_statusbar_get_message_area ##### -->
<para>

</para>

@statusbar: 
@Returns: 


