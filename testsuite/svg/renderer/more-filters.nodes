fill {
  child: color {
    bounds: -10 0 20 20;
    color: rgb(0,0,0);
  }
  path: "\
M 10 10 o 0 10, -10 10, 0.707106769 o -10 0, -10 -10, 0.707106769 o 0 -10, 10 -10, 0.707106769 o 10 0, 10 10, 0.707106769 z";
  fill-rule: winding;
}
blur {
  blur: 5;
  child: fill {
    child: color {
      bounds: 0 0 20 20;
      color: rgb(0,0,0);
    }
    path: "\
M 20 10 o 0 10, -10 10, 0.707106769 o -10 0, -10 -10, 0.707106769 o 0 -10, 10 -10, 0.707106769 o 10 0, 10 10, 0.707106769 z";
    fill-rule: winding;
  }
}
color-matrix {
  matrix: matrix3d(0.75, 0, 0, 0, 0, 0.75, 0, 0, 0, 0, 0.75, 0, 0, 0, 0, 1);
  child: fill {
    child: color {
      bounds: 10 0 20 20;
      color: rgb(0,0,0);
    }
    path: "\
M 30 10 o 0 10, -10 10, 0.707106769 o -10 0, -10 -10, 0.707106769 o 0 -10, 10 -10, 0.707106769 o 10 0, 10 10, 0.707106769 z";
    fill-rule: winding;
  }
}
color-matrix {
  matrix: matrix3d(1.5, 0, 0, 0, 0, 1.5, 0, 0, 0, 0, 1.5, 0, 0, 0, 0, 1);
  offset: -0.25 -0.25 -0.25 0;
  child: fill {
    child: color {
      bounds: 20 0 20 20;
      color: rgb(0,0,0);
    }
    path: "\
M 40 10 o 0 10, -10 10, 0.707106769 o -10 0, -10 -10, 0.707106769 o 0 -10, 10 -10, 0.707106769 o 10 0, 10 10, 0.707106769 z";
    fill-rule: winding;
  }
}
color-matrix {
  matrix: matrix3d(0.2126, 0.2126, 0.2126, 0, 0.7152, 0.7152, 0.7152, 0, 0.0722, 0.0722, 0.0722, 0, 0, 0, 0, 1);
  child: fill {
    child: color {
      bounds: 30 0 20 20;
      color: rgb(0,0,0);
    }
    path: "\
M 50 10 o 0 10, -10 10, 0.707106769 o -10 0, -10 -10, 0.707106769 o 0 -10, 10 -10, 0.707106769 o 10 0, 10 10, 0.707106769 z";
    fill-rule: winding;
  }
}
color-matrix {
  matrix: matrix3d(0.445186, 0.222786, -0.568555, 0, -0.269001, 0.983843, 0.947791, 0, 0.823815, -0.206629, 0.620764, 0, 0, 0, 0, 1);
  child: fill {
    child: color {
      bounds: 40 0 20 20;
      color: rgb(0,0,0);
    }
    path: "\
M 60 10 o 0 10, -10 10, 0.707106769 o -10 0, -10 -10, 0.707106769 o 0 -10, 10 -10, 0.707106769 o 10 0, 10 10, 0.707106769 z";
    fill-rule: winding;
  }
}
color-matrix {
  matrix: matrix3d(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1);
  offset: 0.5 0.5 0.5 0;
  child: fill {
    child: color {
      bounds: 50 0 20 20;
      color: rgb(0,0,0);
    }
    path: "\
M 70 10 o 0 10, -10 10, 0.707106769 o -10 0, -10 -10, 0.707106769 o 0 -10, 10 -10, 0.707106769 o 10 0, 10 10, 0.707106769 z";
    fill-rule: winding;
  }
}
opacity {
  opacity: 0.75;
  child: fill {
    child: color {
      bounds: 60 0 20 20;
      color: rgb(0,0,0);
    }
    path: "\
M 80 10 o 0 10, -10 10, 0.707106769 o -10 0, -10 -10, 0.707106769 o 0 -10, 10 -10, 0.707106769 o 10 0, 10 10, 0.707106769 z";
    fill-rule: winding;
  }
}
color-matrix {
  matrix: matrix3d(0.80315, 0.05315, 0.05315, 0, 0.1788, 0.9288, 0.1788, 0, 0.01805, 0.01805, 0.76805, 0, 0, 0, 0, 1);
  child: fill {
    child: color {
      bounds: 70 0 20 20;
      color: rgb(0,0,0);
    }
    path: "\
M 90 10 o 0 10, -10 10, 0.707106769 o -10 0, -10 -10, 0.707106769 o 0 -10, 10 -10, 0.707106769 o 10 0, 10 10, 0.707106769 z";
    fill-rule: winding;
  }
}
color-matrix {
  matrix: matrix3d(0.54475, 0.26175, 0.204, 0, 0.57675, 0.7645, 0.4005, 0, 0.14175, 0.126, 0.34825, 0, 0, 0, 0, 1);
  child: fill {
    child: color {
      bounds: 80 0 20 20;
      color: rgb(0,0,0);
    }
    path: "\
M 100 10 o 0 10, -10 10, 0.707106769 o -10 0, -10 -10, 0.707106769 o 0 -10, 10 -10, 0.707106769 o 10 0, 10 10, 0.707106769 z";
    fill-rule: winding;
  }
}
component-transfer {
  child: fill {
    child: color {
      bounds: 90 0 20 20;
      color: rgb(0,0,0);
    }
    path: "\
M 110 10 o 0 10, -10 10, 0.707106769 o -10 0, -10 -10, 0.707106769 o 0 -10, 10 -10, 0.707106769 o 10 0, 10 10, 0.707106769 z";
    fill-rule: winding;
  }
  alpha: discrete(0, 0, 1, 1, 1, 1, 1, 1, 1, 1);
}
component-transfer {
  child: color-matrix {
    matrix: matrix3d(0.475704, 0.257555, 0.203639, 0, 0.658432, 0.779397, 0.470727, 0, 0.129114, 0.115298, 0.278385, 0, 0, 0, 0, 1);
    child: opacity {
      opacity: 0.75;
      child: color-matrix {
        matrix: matrix3d(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1);
        offset: 0.5 0.5 0.5 0;
        child: blur {
          blur: 5;
          child: fill {
            child: color {
              bounds: 0 20 10 10;
              color: rgb(0,0,0);
            }
            path: "\
M 0 20 h 10 v 10 h -10 z";
            fill-rule: winding;
          }
        }
      }
    }
  }
  alpha: discrete(0, 0, 1, 1, 1, 1, 1, 1, 1, 1);
}
